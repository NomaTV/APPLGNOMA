<?php
// =================================================================
// ARQUIVO DE CONFIGURA칂츾O DO BANCO DE DADOS (SQLite) - NomaTV v4.2
// =================================================================
// Responsabilidade:
// 1. Estabelecer a conex칚o com o banco de dados SQLite.
// 2. Definir o caminho para o arquivo do banco de dados.
// 3. Criar todas as tabelas necess치rias se elas n칚o existirem.
// 4. Inserir dados iniciais (admin, configura칞칫es) na primeira execu칞칚o.
// 
// 游꿢 NOVA ESTRUTURA v4.2: 4 TABELAS APENAS
// - revendedores (chave mestra: id_revendedor, campo master)
// - provedores (vinculados via id_revendedor)
// - client_ids (sempre apontam para id_revendedor final)
// - auditoria (logs com id_revendedor)
// =================================================================

// Define o caminho para o arquivo do banco de dados, que ficar치 na raiz do diret칩rio /api
$dbPath = __DIR__ . '/../db.db';

try {
    // Cria uma nova inst칙ncia de PDO para se conectar ao SQLite
    $db = new PDO('sqlite:' . $dbPath);
    
    // Define atributos para o tratamento de erros e o modo de busca
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    $db->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
    
    // Habilita o suporte a chaves estrangeiras, essencial para a integridade dos dados
    $db->exec('PRAGMA foreign_keys = ON;');
    
    // Chama a fun칞칚o para verificar e criar as tabelas do sistema
    createTablesIfNotExist($db);
    
} catch (PDOException $e) {
    // Em caso de falha na conex칚o, retorna um erro 500 (Internal Server Error)
    http_response_code(500);
    // Encerra a execu칞칚o e envia uma resposta JSON com o erro
    exit(json_encode(['success' => false, 'error' => 'Erro de conex칚o com o banco de dados: ' . $e->getMessage()]));
}

/**
 * Fun칞칚o principal que orquestra a cria칞칚o das tabelas.
 *
 * @param PDO $db A inst칙ncia da conex칚o com o banco de dados.
 */
function createTablesIfNotExist(PDO $db) {
    // Array associativo contendo o nome da tabela e seu respectivo SQL de cria칞칚o
    // 游꿢 NOVA ESTRUTURA v4.2: APENAS 4 TABELAS
    $tablesSQL = [
        'revendedores' => "
            CREATE TABLE IF NOT EXISTS revendedores (
                id_revendedor INTEGER PRIMARY KEY,
                usuario VARCHAR(50) UNIQUE NOT NULL,
                senha VARCHAR(255) NOT NULL,
                nome VARCHAR(100) NOT NULL,
                email VARCHAR(150),
                master VARCHAR(10) NOT NULL CHECK (master IN ('admin', 'sim', 'nao')),
                master_de INTEGER,
                plano VARCHAR(50) DEFAULT 'B치sico',
                valor_ativo DECIMAL(10,2),
                valor_mensal DECIMAL(10,2),
                limite_ativos INTEGER DEFAULT 100,
                ativo BOOLEAN DEFAULT 1,
                criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                atualizado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                
                FOREIGN KEY (master_de) REFERENCES revendedores(id_revendedor),
                CHECK ((valor_ativo IS NOT NULL AND valor_mensal IS NULL) OR 
                       (valor_ativo IS NULL AND valor_mensal IS NOT NULL))
            )",
        'provedores' => "
            CREATE TABLE IF NOT EXISTS provedores (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome VARCHAR(100) UNIQUE NOT NULL,
                dns VARCHAR(255) NOT NULL,
                tipo VARCHAR(20) DEFAULT 'xtream',
                id_revendedor INTEGER NOT NULL,
                ativo BOOLEAN DEFAULT 1,
                criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                atualizado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                
                FOREIGN KEY (id_revendedor) REFERENCES revendedores(id_revendedor) ON DELETE CASCADE
            )",
        'client_ids' => "
            CREATE TABLE IF NOT EXISTS client_ids (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                client_id VARCHAR(36) UNIQUE NOT NULL,
                provedor_id INTEGER NOT NULL,
                id_revendedor INTEGER NOT NULL,
                usuario VARCHAR(100),
                primeira_conexao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                ultima_atividade TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                ativo BOOLEAN DEFAULT 1,
                ip VARCHAR(45),
                user_agent TEXT,
                
                FOREIGN KEY (provedor_id) REFERENCES provedores(id) ON DELETE CASCADE,
                FOREIGN KEY (id_revendedor) REFERENCES revendedores(id_revendedor) ON DELETE CASCADE
            )",
        'auditoria' => "
            CREATE TABLE IF NOT EXISTS auditoria (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                id_revendedor INTEGER,
                acao VARCHAR(100) NOT NULL,
                detalhes TEXT,
                ip VARCHAR(45),
                user_agent TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                
                FOREIGN KEY (id_revendedor) REFERENCES revendedores(id_revendedor) ON DELETE SET NULL
            )"
    ];

    // Itera sobre o array e executa o SQL de cria칞칚o para cada tabela
    foreach ($tablesSQL as $tableName => $sql) {
        try {
            $db->exec($sql);
            // Log opcional: descomente a linha abaixo se quiser ver quais tabelas est칚o sendo criadas
            // error_log("NomaTV v4.2: Tabela '$tableName' verificada/criada com sucesso.");
        } catch (PDOException $e) {
            // Se houver erro na cria칞칚o de alguma tabela, registra o erro e continua
            error_log("NomaTV v4.2: Erro ao criar tabela '$tableName': " . $e->getMessage());
            throw $e; // Re-lan칞a a exce칞칚o para interromper a execu칞칚o
        }
    }
    
    // Ap칩s criar as tabelas, insere os dados iniciais (se necess치rio)
    insertInitialData($db);
}

/**
 * Insere dados iniciais necess치rios para o funcionamento do sistema.
 *
 * @param PDO $db A inst칙ncia da conex칚o com o banco de dados.
 */
function insertInitialData(PDO $db) {
    try {
        // --- Inserir Admin Padr칚o (id_revendedor: 1000) ---
        // Verifica se j치 existe um admin no sistema
        $stmt = $db->prepare("SELECT COUNT(*) FROM revendedores WHERE master = 'admin'");
        $stmt->execute();
        
        if ($stmt->fetchColumn() == 0) {
            // Se n칚o existe admin, cria um admin padr칚o
            $senhaHash = hash('sha256', 'admin123'); // Senha padr칚o: admin123
            $insertStmt = $db->prepare("
                INSERT INTO revendedores (id_revendedor, usuario, senha, nome, master, master_de, valor_ativo, valor_mensal, limite_ativos) 
                VALUES (1000, 'admin', ?, 'Super Administrador', 'admin', NULL, NULL, NULL, 9999)
            ");
            $insertStmt->execute([$senhaHash]);
            
            error_log("NomaTV v4.2: Admin padr칚o criado - Usuario: admin | Senha: admin123 | ID: 1000");
        }

        // --- Inserir Revendedor de Exemplo (id_revendedor: 1234) ---
        // Verifica se j치 existe o revendedor de exemplo
        $stmt = $db->prepare("SELECT COUNT(*) FROM revendedores WHERE id_revendedor = 1234");
        $stmt->execute();
        
        if ($stmt->fetchColumn() == 0) {
            $senhaHashRev = hash('sha256', 'revendedor123');
            $insertStmt = $db->prepare("
                INSERT INTO revendedores (id_revendedor, usuario, senha, nome, email, master, master_de, plano, valor_ativo, valor_mensal, limite_ativos) 
                VALUES (1234, 'joao', ?, 'Jo칚o Silva', 'joao@nomatv.com', 'sim', NULL, 'Premium', 2.50, NULL, 200)
            ");
            $insertStmt->execute([$senhaHashRev]);
        }

        // --- Inserir Sub-Revendedor de Exemplo (id_revendedor: 5678) ---
        // Verifica se j치 existe o sub-revendedor de exemplo
        $stmt = $db->prepare("SELECT COUNT(*) FROM revendedores WHERE id_revendedor = 5678");
        $stmt->execute();
        
        if ($stmt->fetchColumn() == 0) {
            $senhaHashSub = hash('sha256', 'sub123');
            $insertStmt = $db->prepare("
                INSERT INTO revendedores (id_revendedor, usuario, senha, nome, email, master, master_de, plano, valor_ativo, valor_mensal, limite_ativos) 
                VALUES (5678, 'pedro', ?, 'Pedro Santos', 'pedro@nomatv.com', 'nao', 1234, 'B치sico', NULL, 50.00, 100)
            ");
            $insertStmt->execute([$senhaHashSub]);
        }

        // --- Inserir Provedores de Exemplo ---
        $stmt = $db->prepare("SELECT COUNT(*) FROM provedores");
        $stmt->execute();
        
        if ($stmt->fetchColumn() == 0) {
            $provedoresExemplo = [
                ['PlayBR', 'http://server1.com:8080', 'xtream', 1234],
                ['NetTV', 'http://server2.com:8080', 'xtream', 5678],
                ['StreamHD', 'http://server3.com:8080', 'xtream', 1234]
            ];
            
            $insertStmt = $db->prepare("
                INSERT INTO provedores (nome, dns, tipo, id_revendedor) 
                VALUES (?, ?, ?, ?)
            ");
            
            foreach ($provedoresExemplo as $provedor) {
                $insertStmt->execute($provedor);
            }
        }

        // --- Criar 칤ndices para performance ---
        $indexes = [
            "CREATE INDEX IF NOT EXISTS idx_revendedores_usuario ON revendedores(usuario)",
            "CREATE INDEX IF NOT EXISTS idx_revendedores_master ON revendedores(master)",
            "CREATE INDEX IF NOT EXISTS idx_revendedores_master_de ON revendedores(master_de)",
            "CREATE INDEX IF NOT EXISTS idx_provedores_nome ON provedores(nome)",
            "CREATE INDEX IF NOT EXISTS idx_provedores_revendedor ON provedores(id_revendedor)",
            "CREATE INDEX IF NOT EXISTS idx_client_ids_client_id ON client_ids(client_id)",
            "CREATE INDEX IF NOT EXISTS idx_client_ids_revendedor ON client_ids(id_revendedor)",
            "CREATE INDEX IF NOT EXISTS idx_client_ids_ativo ON client_ids(ativo)",
            "CREATE INDEX IF NOT EXISTS idx_auditoria_revendedor ON auditoria(id_revendedor)",
            "CREATE INDEX IF NOT EXISTS idx_auditoria_timestamp ON auditoria(timestamp)"
        ];
        
        foreach ($indexes as $indexSQL) {
            try {
                $db->exec($indexSQL);
            } catch (PDOException $e) {
                // 칈ndices s칚o opcionais - continue mesmo se houver erro
                error_log("NomaTV v4.2: Aviso ao criar 칤ndice: " . $e->getMessage());
            }
        }

        error_log("NomaTV v4.2: Sistema inicializado com dados de exemplo!");
        
    } catch (PDOException $e) {
        error_log("NomaTV v4.2: Erro ao inserir dados iniciais: " . $e->getMessage());
        // N칚o lance exce칞칚o aqui - deixe o sistema funcionar mesmo sem dados de exemplo
    }
}

// O arquivo termina aqui. Ele n칚o deve ter output (echo), apenas disponibilizar a vari치vel $db.
?>